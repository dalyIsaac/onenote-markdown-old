import {
  GET_NOTEBOOK,
  GET_ONENOTE,
  GET_PAGE,
  GET_PAGE_CONTENT,
  GET_PAGE_CONTENT_ERROR,
  GET_SECTION,
  GET_SECTION_GROUP,
  LOAD_ONENOTE,
  OPEN_NOTEBOOKS,
  SAVE_NOTEBOOK,
  SAVE_PAGE,
  SAVE_PAGE_CONTENT,
  SAVE_SECTION,
  SAVE_SECTION_GROUP,
  UPDATE_IS_EXPANDED
} from "../../actionTypes";
import { Notebook } from "../../types/Notebook";
import { IAction } from "../index";

import { IStateOneNote } from "../../reducers";
import { OneNoteBase } from "../../types/OneNoteBase";
import { Page } from "../../types/Page";
import { Section } from "../../types/Section";
import { SectionGroup } from "../../types/SectionGroup";

export interface IOpenNotebooks extends IAction {
  notebookList: Notebook[];
}

/**
 * Creates an action to open the notebooks in the `notebookList`
 * @param notebookList Notebooks to open
 */
export const openNotebooks = (notebookList: Notebook[]): IOpenNotebooks => ({
  notebookList,
  type: OPEN_NOTEBOOKS
});

export interface ILoadOneNote extends IAction {
  onenote: IStateOneNote;
}

/**
 * Creates an action which loads all OneNote objects
 * @param onenote Array of OneNote objects, which have a base class of `OneNoteBase`
 */
export const loadOneNote = (onenote: OneNoteBase[]) => ({
  onenote,
  type: LOAD_ONENOTE
});

/**
 * Creates an action which gets all of the OneNote objects from localForage
 */
export const getOneNote = (): IAction => ({
  type: GET_ONENOTE
});

export interface IGetNotebook extends IAction {
  notebookUrl?: string;
  userId: string;
}

/**
 * Creates an action which fetches/gets a notebook
 * @param userId The random string generated by the Microsoft Graph which represents the user
 * @param notebookUrl The URL which allows access to the Notebook in the Microsoft Graph
 */
export const getNotebook = (
  userId: string,
  notebookUrl?: string
): IGetNotebook => ({
  notebookUrl,
  type: GET_NOTEBOOK,
  userId
});

export interface ISaveNotebook extends IAction {
  notebook: Notebook;
}

/**
 * Creates an action which saves a notebook in Redux and in localforage
 * @param notebook The notebook which is to be saved
 */
export const saveNotebook = (notebook: Notebook): ISaveNotebook => ({
  notebook,
  type: SAVE_NOTEBOOK
});

export interface IGetSectionGroup extends IAction {
  parentSelfUser: string;
  sectionGroupId: string;
  userId?: string;
}

/**
 * Creates an action which fetches/gets a section group
 * @param userId
 * @param sectionGroupId
 * @param parentSelfUser user as defined in the self URL for the parent
 */
export const getSectionGroup = (
  userId: string | undefined,
  sectionGroupId: string,
  parentSelfUser: string
): IGetSectionGroup => ({
  parentSelfUser,
  sectionGroupId,
  type: GET_SECTION_GROUP,
  userId
});

export interface ISaveSectionGroup extends IAction {
  sectionGroup: SectionGroup;
}

/**
 * Creates an action which saves a section group in Redux and in localForage
 * @param sectionGroup
 */
export const saveSectionGroup = (
  sectionGroup: SectionGroup
): ISaveSectionGroup => ({
  sectionGroup,
  type: SAVE_SECTION_GROUP
});

export interface IGetSection extends IAction {
  userId?: string;
  sectionId: string;
  parentSelfUser: string;
}

/**
 * Creates an action which fetches/gets a section
 * @param userId
 * @param sectionId
 * @param parentSelfUser user as defined in the self URL for the parent
 */
export const getSection = (
  userId: string | undefined,
  sectionId: string,
  parentSelfUser: string
): IGetSection => ({
  parentSelfUser,
  sectionId,
  type: GET_SECTION,
  userId
});

export interface ISaveSection extends IAction {
  section: Section;
}

/**
 * Creates an action which saves a section in Redux and in localforage
 * @param {Section} section
 */
export const saveSection = (section: Section): ISaveSection => ({
  section,
  type: SAVE_SECTION
});

export interface IGetPage extends IAction {
  pageId?: string;
  parentSelfUser: string;

  userId?: string;
}

/**
 * Creates an action which fetches/gets a page and its contents
 * @param userId
 * @param pageId
 * @param parentSelfUser user as defined in the self URL for the parent
 */
export const getPage = (
  userId: string | undefined,
  pageId: string | undefined,
  parentSelfUser: string
): IGetPage => ({
  pageId,
  parentSelfUser,
  type: GET_PAGE,
  userId
});

export interface IGetPageContent extends IAction {
  pageId: string;
}

/**
 * Creates an action to get a page's contents
 * @param pageId
 */
export const getPageContent = (pageId: string): IGetPageContent => ({
  pageId,
  type: GET_PAGE_CONTENT
});

export interface ISavePageContent extends IAction {
  content: string;
  pageId: string;
}

/**
 * Creates an action to save a page's contents to Redux and localForage
 * @param pageId
 * @param content
 */
export const savePageContent = (
  pageId: string,
  content: string
): ISavePageContent => ({
  content,
  pageId,
  type: SAVE_PAGE_CONTENT
});

export interface IGetPageContentError extends IAction {
  error: any;
  pageId: string;
}

/**
 * Creates an action to save the error for the page content request to Redux (but not to localforage)
 * @param pageId
 * @param content
 */
export const getPageContentError = (
  pageId: string,
  error: any
): IGetPageContentError => ({
  error,
  pageId,
  type: GET_PAGE_CONTENT_ERROR
});

export interface ISavePage extends IAction {
  page: Page;
}

/**
 * Creates an action to save a page in Redux and in localForage
 * @param page
 */
export const savePage = (page: Page): ISavePage => ({
  page,
  type: SAVE_PAGE
});

export interface IUpdateIsExpanded extends IAction {
  id: string;
  isExpanded: boolean;
}

/**
 * Creates an action to update a section group to indicate whether it is expanded in `sectionsNav`
 * @param id
 * @param isExpanded
 */
export const updateIsExpanded = (
  id: string,
  isExpanded: boolean
): IUpdateIsExpanded => ({
  id,
  isExpanded,
  type: UPDATE_IS_EXPANDED
});
